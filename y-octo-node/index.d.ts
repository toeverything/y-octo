/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export declare function encodeStateAsUpdate(doc: Doc, state?: Buffer | undefined | null): Buffer
export declare function encodeStateVector(doc: Doc): Buffer
export declare function createDeleteSetFromStructStore(store: YStore): YDeleteSet
export declare function equalDeleteSets(a: YDeleteSet, b: YDeleteSet): boolean
export declare function snapshot(doc: Doc): YSnapshot
export declare function encodeSnapshot(snapshot: YSnapshot): Buffer
export declare function applyUpdate(doc: Doc, update: Buffer): void
export declare function mergeUpdates(updates: Array<Buffer>): Buffer
export declare function isAbstractType(unknown: unknown): boolean
export type YArray = Array
export class Array {
  constructor()
  get length(): number
  get isEmpty(): boolean
  get<T = unknown>(index: number): T
  slice<T = unknown>(start: number, end: number): Array<T>
  map<T = unknown>(callback: (...args: any[]) => any): Array<T>
  insert(index: number, value: YArray | YMap | YText | boolean | number | string | Record<string, any> | null | undefined): void
  push(value: YArray | YMap | YText | boolean | number | string | Record<string, any> | null | undefined): void
  unshift(value: YArray | YMap | YText | boolean | number | string | Record<string, any> | null | undefined): void
  delete(index: number, len: number): void
  toJson(): JsArray
  iter(): YArrayIterator
}
export class YArrayIterator {
  [Symbol.iterator](): Iterator<MixedYType, void, number | undefined | null>
}
export type YDoc = Doc
export class Doc {
  constructor(clientId?: number | undefined | null)
  get clientId(): number
  get guid(): string
  get store(): YStore
  get keys(): Array<string>
  getOrCreateArray(key: string): Array
  getOrCreateText(key: string): YText
  getOrCreateMap(key: string): YMap
  createArray(): Array
  createText(): YText
  createMap(): YMap
  applyUpdate(update: Buffer): void
  encodeStateAsUpdateV1(state?: Buffer | undefined | null): Buffer
  gc(): void
  onUpdate(callback: (result: Uint8Array) => void): void
}
export type YMap = Map
export class Map {
  constructor()
  get length(): number
  get isEmpty(): boolean
  get<T = unknown>(key: string): T
  set(key: string, value: YArray | YMap | YText | boolean | number | string | Record<string, any> | null | undefined): void
  remove(key: string): void
  toJson(): object
}
export type YText = Text
export class Text {
  constructor()
  get len(): number
  get isEmpty(): boolean
  insert(index: number, str: string): void
  remove(index: number, len: number): void
  get length(): number
  toString(): string
}
export type YStore = Store
export class Store { }
export type YDeleteSet = DeleteSet
export class DeleteSet { }
export class YSnapshot { }
