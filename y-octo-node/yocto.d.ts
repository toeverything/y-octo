/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export declare function encodeStateAsUpdate(doc: Doc, state?: Buffer | undefined | null): Buffer
export declare function encodeStateVector(doc: Doc): Buffer
export declare function compareStructStores(store: YStore, other: YStore): boolean
export declare function compareIds(a?: YId | undefined | null, b?: YId | undefined | null): boolean
export declare function createDeleteSetFromStructStore(store: YStore): YDeleteSet
export declare function equalDeleteSets(a: YDeleteSet, b: YDeleteSet): boolean
export declare function snapshot(doc: Doc): YSnapshot
export declare function encodeSnapshot(snapshot: YSnapshot): Buffer
export declare function applyUpdate(doc: Doc, update: Buffer): void
export declare function mergeUpdates(updates: Array<Buffer>): Buffer
export declare function isAbstractType(unknown: unknown): boolean
export declare class YArray {
  get length(): number
  get isEmpty(): boolean
  get<T = unknown>(index: number): T
  slice<T = unknown>(start: number, end?: number | undefined | null): Array<T>
  map<T = unknown>(callback: (...args: any[]) => any): Array<T>
  insert(index: number, value: YArray | YMap | YText | boolean | number | string | Record<string, any> | null | undefined): void
  push(value: YArray | YMap | YText | boolean | number | string | Record<string, any> | null | undefined): void
  unshift(value: YArray | YMap | YText | boolean | number | string | Record<string, any> | null | undefined): void
  delete(index: number, len?: number | undefined | null): void
  iter(): YArrayIterator
  toArray<T = unknown>(): Array<T>
  toJSON<T = unknown>(): Array<T>
  observe(callback: (...args: any[]) => any): void
  observeDeep(callback: (...args: any[]) => any): void
}
export declare class YArrayIterator {
  [Symbol.iterator](): Iterator<MixedYType, void, number | undefined | null>
}
export type YAwareness = Awareness
export declare class Awareness {
  constructor(clientId?: number | undefined | null)
  get clientId(): number
  get states(): Record<string, any>
}
export type YDoc = Doc
export declare class Doc {
  constructor(clientId?: number | undefined | null)
  get clientId(): number
  set clientId(clientId: number)
  get guid(): string
  get store(): YStore
  get keys(): Array<string>
  getOrCreateArray(key: string): YArray
  getOrCreateText(key: string): YText
  getOrCreateMap(key: string): YMap
  createArray(): YArray
  createText(text?: string | undefined | null): YText
  createMap(entries?: Iterator<[string,any]>): YMap
  applyUpdate(update: Buffer): void
  diff(sv?: Buffer | undefined | null): Buffer | null
  encodeStateAsUpdateV1(state?: Buffer | undefined | null): Buffer
  gc(): void
  onUpdate(callback: (result: Uint8Array) => void): void
  offUpdate(): void
}
export declare class YMap {
  get length(): number
  get size(): number
  get isEmpty(): boolean
  get itemId(): YId | null
  get<T = unknown>(key: string): T
  set<T = YArray | YMap | YText | boolean | number | string | Record<string, any> | null | undefined>(key: string, value: T): T
  delete(key: string): void
  clear(): void
  toJson(): object
  entries(): YMapEntriesIterator
  keys(): YMapKeyIterator
  values(): YMapValuesIterator
  observe(callback: (...args: any[]) => any): void
  observeDeep(callback: (...args: any[]) => any): void
}
export declare class YMapEntriesIterator {
  [Symbol.iterator](): Iterator<JsArray, void, number | undefined | null>
}
export declare class YMapKeyIterator {
  [Symbol.iterator](): Iterator<string, void, number | undefined | null>
}
export declare class YMapValuesIterator {
  [Symbol.iterator](): Iterator<unknown, void, number | undefined | null>
}
export type YProtocol = Protocol
export declare class Protocol {
  constructor(doc: Doc)
  encodeSyncStep(step: number, buffer?: Buffer | undefined | null): Buffer
  applySyncStep(buffer: Buffer): Buffer | null
}
export declare class YText {
  constructor()
  get len(): number
  get isEmpty(): boolean
  insert(index: number, str: string): void
  delete(index: number, len: number): void
  get length(): number
  applyDelta(delta: any[]): void
  toDelta(): any[]
  toString(): string
  observe(callback: (...args: any[]) => any): void
  observeDeep(callback: (...args: any[]) => any): void
}
export type YId = Id
export declare class Id { }
export type YStore = Store
export declare class Store { }
export type YDeleteSet = DeleteSet
export declare class DeleteSet { }
export declare class YSnapshot { }
